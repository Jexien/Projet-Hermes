name: CI

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

jobs:
  validate-schemas:
    name: Validate JSON schemas
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Validate JSON schemas
        run: |
          echo "Validating JSON schemas in packages/shared/schemas..."
          files=(packages/shared/schemas/*.json)
          if [ ! -d "packages/shared/schemas" ] || [ ${#files[@]} -eq 0 ]; then
            echo "No schema files found, skipping."
            exit 0
          fi
          for f in "${files[@]}"; do
            echo "Checking $f"
            node -e "const fs=require('fs'); try{JSON.parse(fs.readFileSync('$f','utf8')); console.log('OK');}catch(e){console.error('Invalid JSON in $f:',e.message); process.exit(1)}"
          done

  lint_and_test:
    name: Lint and Test (if configured)
    runs-on: ubuntu-latest
    needs: validate-schemas
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Install dependencies (if package.json)
        run: |
          if [ -f package.json ]; then
            if [ -f pnpm-lock.yaml ]; then
              corepack enable
              corepack prepare pnpm@latest --activate
              pnpm install
            else
              npm ci
            fi
          else
            echo "No package.json, skipping install"
          fi
      - name: Run lint
        run: |
          if [ -f package.json ] && npm run --silent | grep -q 'lint'; then
            npm run lint
          else
            echo "No lint script, skipping"
          fi
      - name: Run tests
        run: |
          if [ -f package.json ] && npm run --silent | grep -q 'test'; then
            npm run test --if-present --silent
          else
            echo "No test script, skipping"
          fi

  release:
    name: Create Release on tag
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Create GitHub Release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
